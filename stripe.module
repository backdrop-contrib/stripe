<?php
/**
 * @file
 * Contains hook and methods for the Stripe API module.
 */

// Define the checkout javascript location.
define('STRIPE_API_CHECKOUT_JS', 'https://checkout.stripe.com/checkout.js');

// Lode the file that contains the magic.
module_load_include('inc', 'stripe', 'stripe.methods');

/**
 * Implements hook_config_info().
 */
function stripe_config_info() {
  $prefixes['stripe.settings'] = array(
    'label' => t('Stripe API settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function stripe_menu() {
  $items['admin/config/services/stripe'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Stripe',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('stripe_admin_settings_form'),
    'access arguments' => array('edit stripe api settings'),
    'description' => 'Configure Stripe credentials.',
    'file' => 'stripe.admin.inc',
  );
  $items['admin/config/services/stripe/settings'] = array(
    'title' => 'API Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['stripe/webhook'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'page callback' => 'stripe_incoming_webhook',
  );

  return $items;
}

/**
 * Page callback: Processes incoming Stripe webhooks.
 */
function stripe_incoming_webhook() {
  $input = file_get_contents("php://input");
  $event_json = json_decode($input);
  $event = NULL;
  // Validate the webhook if we are in LIVE mode.
  if (config_get('stripe.settings', 'mode') === 'live' && ($event_json->livemode == TRUE || $event_json->id !== 'evt_00000000000000')) {
    $event = stripe_api_call('event', 'retrieve', $event_json->id);
    if (!$event) {
      watchdog('stripe', 'Invalid webhook event: @data', array(
        '@data' => $input,
      ), WATCHDOG_ERROR);
      // This webhook event is invalid.
      drupal_add_http_header('Status', '403 Forbidden');
      print 'Forbidden';
      exit;
    }
  }

  // Invoke webhooks for others to use.
  if (isset($event_json)) {
    module_invoke_all('stripe_webhook', $event_json->type, $event_json->data, $event);
    module_invoke_all('stripe_webhook_' . str_replace('.', '_', $event_json->type), $event_json->data, $event);
  }
  print 'okay';
}

/**
 * Implements hook_stripe_webhook().
 */
function stripe_stripe_webhook($type, $data, Stripe\Event $event = NULL) {
  if (config_get('stripe.settings', 'log_webhooks')) {
    watchdog('stripe', 'Processed webhook: @name<br /><br />Data: @data', array(
      '@name' => $type,
      '@data' => json_encode($data),
    ), WATCHDOG_INFO);
  }
}

/**
 * Implements hook_system_info_alter().
 */
function stripe_system_info_alter(&$info, $file, $type) {
  // Mark modules that have been integrated into stripe as merged (?)
  if (strstr($info['name'], 'Stripe API')) {
    $info['merged_into_core'] = TRUE;
  }
}

/**
 * Returns the Stripe API secret key.
 *
 * @param string $mode
 *   Stripe mode, either 'live' or 'test'. Leave blank to use the active mode.
 *
 * @return string
 *   Returns the secret key.
 */
function stripe_get_secret_key($mode = '') {
  if (!$mode) {
    $mode = config_get('stripe.settings', 'mode');
  }
  return config_get('stripe_secret.settings', $mode . '_secret_key');
}

/**
 * Returns the Stripe API public key.
 *
 * @param string $mode
 *   Stripe mode, either 'live' or 'test'. Leave blank to use the active mode.
 *
 * @return string
 *   Returns the public key.
 */
function stripe_get_public_key($mode = '') {
  $config = config('stripe.settings');
  if (!$mode) {
    $mode = $config->get('mode');
  }
  return $config->get($mode . '_public_key');
}
